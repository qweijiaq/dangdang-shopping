{
  "compilerOptions": {
    // ts 文件编译的 js 文件语法版本。
    "target": "esnext",
    // TS3.7 之后新增属性, 编译后的类属性转换为 Object.defineProperty 声明，对于没有赋值的类属性也会编译出来
    "useDefineForClassFields": false,

    "module": "esnext",

    // moduleResolution 模块解析
    // 模块解析是 typescript 编译器用何种方式来确定导入所指内容
    // moduleResolution："node" => 采用 node 模块解析的方式查找文件。[从内层到最高目录的外层查找 import 引入的文件]
    // moduleResolution："classic" => 采用 classic 模块解析的方式查找文件。[从外层到内层方式查找 查找 import 引入的文件]
    "moduleResolution": "node",

    // 通过 tsc 编译后输出目录
    "rootDir": "./src", // 指定 TS 要编译的 TS 文件 源目录
    "outDir": "./tsbuild", //  通过 tsc 编译后的 TS 文件输出目录

    //  是否允许导入 js 文件
    "allowJs": true,
    //  编译后是否生成 d.ts 文件
    "declaration": true,

    // 开启严格模式
    "strict": true,
    // 在 vue 中支持 类似 react jsx 的语法格式
    "jsx": "preserve",

    // ts 编译后的 js 文件中生成 Map 文件
    "sourceMap": true,
    "baseUrl": ".",
    // 是否可以导入 json 文件
    "resolveJsonModule": true,

    // export 接口或者 type 类型 会出现错误
    "isolatedModules": true,

    //  有些依赖库底层 为了兼容 CommonJs 规范、AMD 规范这二者的规范中相互兼容，使用了 export =，将二者规范统一
    // "esModuleInterop":true 表示允许依赖库中出现 export = 这种兼容规范导出的格式，TS 可以用 import from 导入
    "esModuleInterop": true,

    // 允许访问的底层依赖库
    "lib": ["esnext", "dom"],
    // 对声明文件不进行类型检查
    "skipLibCheck": true,
    // 使用 @ 别名表示 src
    "paths": {
      "@/*": ["src/*"]
    }
  },
  // ts 编译器编译覆盖的范围。
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.vue", "./vite.config.ts"]
}
